default:
  image: code.waarp.fr:5000/oci/build-base:latest

variables:
  VERSION: "${CI_COMMIT_TAG}"
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  LATEST_IMAGE_TAG: $CI_REGISTRY_IMAGE:latest
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/waarp-gateway/${VERSION}"
  PACKAGE_DEB: "waarp-gateway_${VERSION}-1_amd64.deb"
  PACKAGE_RPM: "waarp-gateway-${VERSION}-1.x86_64.rpm"
  PACKAGE_LIN: "waarp-gateway-${VERSION}.linux.tar.gz"
  PACKAGE_WIN: "waarp-gateway-${VERSION}.windows.zip"
  PACKAGE_DOC: "waarp-gateway-doc-${VERSION}.zip"
  GOPATH: "$CI_PROJECT_DIR/.gocache"
  GOCACHE: "${GOPATH}/go-build"
  GOLANGCI_LINT_CACHE: "$CI_PROJECT_DIR/.golangci-lint-cache"
  GOPRIVATE: "code.waarp.fr/*"

stages:
  - test
  - build
  - upload
  - release

code_navigation:
  stage: test
  allow_failure: true # recommended
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  script:
    - scip-go -o dump.scip
  after_script:
    - scip convert --from dump.scip --to dump.lsif
    - ls -lh dump.scip dump.lsif
  artifacts:
    reports:
      lsif: dump.lsif

lint:
  stage: test
  image: golangci/golangci-lint:latest
  script:
    - golangci-lint cache status
    - golangci-lint run --timeout 15m --output.junit-xml.path lint.junit.xml --output.text.path stdout --output.code-climate.path=gl-code-quality-report.json
  cache:
    - key: go_dependencies_cache
      paths:
        - $GOPATH
      when: always
    - key: $CI_COMMIT_REF_SLUG
      paths:
        - $GOLANGCI_LINT_CACHE
      when: always
  artifacts:
    reports:
      junit: lint.junit.xml
      codequality: gl-code-quality-report.json

tests:
  stage: test
  script:
    - gotestsum --junitfile tests.junit.xml --rerun-fails --format-icons hivis --packages ./... -- -coverprofile=coverage.txt -covermode atomic -shuffle on
  after_script:
    - gocover-cobertura < coverage.txt > coverage.xml
    - go tool cover -func=coverage.txt | grep "total:"
  coverage: '/total:\s+\(statements\)\s+(\d+.\d+\%)/'
  cache:
    - key: go_dependencies_cache
      paths:
        - $GOPATH
  artifacts:
    reports:
      junit: tests.junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

compile:
  stage: build
  except: [ tags ]
  script:
    - ./make.sh build dist
  cache:
    - key: go_dependencies_cache
      paths:
        - $GOPATH

package:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - >
      apt update -y
      && apt install -y docker.io
      && apt clean
      && rm -rf /var/lib/apt/lists/*
    - git config url."https://gitlab-ci-token:$CI_JOB_TOKEN@code.waarp.fr".insteadOf "https://code.waarp.fr"
  script:
    - ./make.sh build dist
    - ./make.sh package
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker push $IMAGE_TAG
  after_script:
    - export FULLVERSION=$(git describe --tags --abbrev=0)
    - echo VERSION=${FULLVERSION#v} >>version.env
    - ls build/
  cache:
    - key: go_dependencies_cache
      paths:
        - $GOPATH
  artifacts:
    paths:
      - build/*.rpm
      - build/*.deb
      - build/*.zip
      - build/*.tar.gz
    reports:
      dotenv: version.env

upload-packages:
  stage: upload
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/${PACKAGE_DEB} ${PACKAGE_REGISTRY_URL}/${PACKAGE_DEB}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/${PACKAGE_RPM} ${PACKAGE_REGISTRY_URL}/${PACKAGE_RPM}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/${PACKAGE_LIN} ${PACKAGE_REGISTRY_URL}/${PACKAGE_LIN}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/${PACKAGE_WIN} ${PACKAGE_REGISTRY_URL}/${PACKAGE_WIN}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/${PACKAGE_DOC} ${PACKAGE_REGISTRY_URL}/${PACKAGE_DOC}

upload-docker:
  image: docker:18.09
  stage: upload
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull "$IMAGE_TAG"
    - docker tag "$IMAGE_TAG" "$LATEST_IMAGE_TAG"
    - docker push "$LATEST_IMAGE_TAG"

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      release-cli create \
        --name "${CI_COMMIT_TAG}" \
        --tag-name $CI_COMMIT_TAG \
        --milestone $CI_COMMIT_TAG \
        --released-at "$CI_COMMIT_TIMESTAMP" \
        --description "${CI_COMMIT_MESSAGE}" \
        --assets-link "{\"name\":\"${PACKAGE_DEB}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_DEB}\"}" \
        --assets-link "{\"name\":\"${PACKAGE_RPM}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_RPM}\"}" \
        --assets-link "{\"name\":\"${PACKAGE_LIN}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_LIN}\"}" \
        --assets-link "{\"name\":\"${PACKAGE_WIN}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_WIN}\"}" \
        --assets-link "{\"name\":\"${PACKAGE_DOC}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_DOC}\"}"

