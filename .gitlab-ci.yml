# This file is a template, and might need editing before it works on your project.
image: golang:latest

variables:
  VERSION: "${CI_COMMIT_TAG}"
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  LATEST_IMAGE_TAG: $CI_REGISTRY_IMAGE:latest
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/waarp-gateway/${VERSION}"

stages:
    - test
    - build
    - upload
    - release

code_navigation:
  stage: test
  image: sourcegraph/lsif-go:latest
  allow_failure: true # recommended
  script:
  - lsif-go --no-animation
  - ls -lh dump.lsif
  artifacts:
    reports:
      lsif: dump.lsif

lint:
  stage: test
  image: golangci/golangci-lint:latest
  script:
  - golangci-lint cache status
  - golangci-lint run --timeout 5m --out-format junit-xml > lint.junit.xml
  artifacts:
    reports:
      junit: lint.junit.xml

tests:
  stage: test
  before_script:
    - export GOPATH="$CI_PROJECT_DIR/.gocache"
    - export PATH="$CI_PROJECT_DIR/.gocache/bin:$PATH"
    - go install gotest.tools/gotestsum@latest
  script:
    #- gotestsum --junitfile tests.junit.xml -- -coverprofile=coverage.txt -covermode atomic -race ./...
    - gotestsum --junitfile tests.junit.xml -- -coverprofile=coverage.txt -covermode atomic ./...
  after_script:
    - go install github.com/boumenot/gocover-cobertura@latest
    - gocover-cobertura < coverage.txt > coverage.xml
    - go tool cover -func=coverage.txt | grep "total:"
  coverage: '/total:\s+\(statements\)\s+(\d+.\d+\%)/'
  cache:
    key: go_dependencies_cache
    paths:
    - $CI_PROJECT_DIR/.gocache/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

compile:
  stage: build
  except: [ tags ]
  before_script:
    - >
      apt update -y
      && apt install -y file gcc-multilib gcc-mingw-w64-x86-64
      && apt clean
      && rm -rf /var/lib/apt/lists/*
    - export GOPATH="$CI_PROJECT_DIR/.gocache"
    - export PATH="$CI_PROJECT_DIR/.gocache/bin:$PATH"
  script:
    - ./make.sh build dist
  cache:
    key: go_dependencies_cache
    paths:
    - $CI_PROJECT_DIR/.gocache/

package:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - >
      apt update -y
      && apt install -y file gcc-mingw-w64-x86-64 virtualenv zip docker.io
      && apt clean
      && rm -rf /var/lib/apt/lists/*
    - export GOPATH="$CI_PROJECT_DIR/.gocache"
    - export PATH="$CI_PROJECT_DIR/.gocache/bin:$PATH"
    - git config url."https://gitlab-ci-token:$CI_JOB_TOKEN@code.waarp.fr".insteadOf "https://code.waarp.fr"
    - go install github.com/goreleaser/nfpm/v2/cmd/nfpm@v2.36.1
  script:
    - ./make.sh build dist
    - ./make.sh package
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker push $IMAGE_TAG
  cache:
    key: go_dependencies_cache
    paths:
    - $CI_PROJECT_DIR/.gocache/
  artifacts:
    paths:
      - build/

upload-packages:
  stage: upload
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - export PACKAGE_DEB="waarp-gateway_${VERSION#v}-1_amd64.deb"
    - export PACKAGE_RPM="waarp-gateway-${VERSION#v}-1.x86_64.rpm"
    - export PACKAGE_LIN="waarp-gateway-${VERSION#v}.linux.tar.gz"
    - export PACKAGE_WIN="waarp-gateway-${VERSION#v}.windows.zip"
    - export PACKAGE_DOC="waarp-gateway-doc-${VERSION#v}.zip"
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/${PACKAGE_DEB} ${PACKAGE_REGISTRY_URL}/${PACKAGE_DEB}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/${PACKAGE_RPM} ${PACKAGE_REGISTRY_URL}/${PACKAGE_RPM}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/${PACKAGE_LIN} ${PACKAGE_REGISTRY_URL}/${PACKAGE_LIN}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/${PACKAGE_WIN} ${PACKAGE_REGISTRY_URL}/${PACKAGE_WIN}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/${PACKAGE_DOC} ${PACKAGE_REGISTRY_URL}/${PACKAGE_DOC}

upload-docker:
  image: docker:18.09
  stage: upload
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull "$IMAGE_TAG"
    - docker tag "$IMAGE_TAG" "$LATEST_IMAGE_TAG"
    - docker push "$LATEST_IMAGE_TAG"

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - export PACKAGE_DEB="waarp-gateway_${VERSION#v}-1_amd64.deb"
    - export PACKAGE_RPM="waarp-gateway-${VERSION#v}-1.x86_64.rpm"
    - export PACKAGE_LIN="waarp-gateway-${VERSION#v}.linux.tar.gz"
    - export PACKAGE_WIN="waarp-gateway-${VERSION#v}.windows.zip"
    - export PACKAGE_DOC="waarp-gateway-doc-${VERSION#v}.zip"
  script:
    - |
      release-cli create \
        --name "${CI_COMMIT_TAG}" \
        --tag-name $CI_COMMIT_TAG \
        --milestone $CI_COMMIT_TAG \
        --released-at "$CI_COMMIT_TIMESTAMP" \
        --description "${CI_COMMIT_MESSAGE}" \
        --assets-link "{\"name\":\"${PACKAGE_DEB}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_DEB}\"}" \
        --assets-link "{\"name\":\"${PACKAGE_RPM}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_RPM}\"}" \
        --assets-link "{\"name\":\"${PACKAGE_LIN}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_LIN}\"}" \
        --assets-link "{\"name\":\"${PACKAGE_WIN}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_WIN}\"}" \
        --assets-link "{\"name\":\"${PACKAGE_DOC}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_DOC}\"}"

